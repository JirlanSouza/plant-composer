// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROJECT_PLANT_COMPOSER_FBS_H_
#define FLATBUFFERS_GENERATED_PROJECT_PLANT_COMPOSER_FBS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace plant_composer {
namespace fbs {

struct DiagramMetadata;
struct DiagramMetadataBuilder;

struct ProjectTable;
struct ProjectTableBuilder;

struct DiagramMetadata FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DiagramMetadataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_FILE_PATH = 8
  };
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *file_path() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FILE_PATH);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffsetRequired(verifier, VT_FILE_PATH) &&
           verifier.VerifyString(file_path()) &&
           verifier.EndTable();
  }
};

struct DiagramMetadataBuilder {
  typedef DiagramMetadata Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(DiagramMetadata::VT_ID, id);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(DiagramMetadata::VT_NAME, name);
  }
  void add_file_path(::flatbuffers::Offset<::flatbuffers::String> file_path) {
    fbb_.AddOffset(DiagramMetadata::VT_FILE_PATH, file_path);
  }
  explicit DiagramMetadataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DiagramMetadata> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DiagramMetadata>(end);
    fbb_.Required(o, DiagramMetadata::VT_ID);
    fbb_.Required(o, DiagramMetadata::VT_FILE_PATH);
    return o;
  }
};

inline ::flatbuffers::Offset<DiagramMetadata> CreateDiagramMetadata(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> file_path = 0) {
  DiagramMetadataBuilder builder_(_fbb);
  builder_.add_file_path(file_path);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DiagramMetadata> CreateDiagramMetadataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *name = nullptr,
    const char *file_path = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto file_path__ = file_path ? _fbb.CreateString(file_path) : 0;
  return plant_composer::fbs::CreateDiagramMetadata(
      _fbb,
      id__,
      name__,
      file_path__);
}

struct ProjectTable FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ProjectTableBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_DESCRIPTION = 8,
    VT_AUTHOR = 10,
    VT_VERSION = 12,
    VT_DIAGRAMS_METADATA = 14
  };
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *description() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTION);
  }
  const ::flatbuffers::String *author() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AUTHOR);
  }
  const ::flatbuffers::String *version() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VERSION);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<plant_composer::fbs::DiagramMetadata>> *diagrams_metadata() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<plant_composer::fbs::DiagramMetadata>> *>(VT_DIAGRAMS_METADATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyOffset(verifier, VT_AUTHOR) &&
           verifier.VerifyString(author()) &&
           VerifyOffset(verifier, VT_VERSION) &&
           verifier.VerifyString(version()) &&
           VerifyOffset(verifier, VT_DIAGRAMS_METADATA) &&
           verifier.VerifyVector(diagrams_metadata()) &&
           verifier.VerifyVectorOfTables(diagrams_metadata()) &&
           verifier.EndTable();
  }
};

struct ProjectTableBuilder {
  typedef ProjectTable Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(ProjectTable::VT_ID, id);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(ProjectTable::VT_NAME, name);
  }
  void add_description(::flatbuffers::Offset<::flatbuffers::String> description) {
    fbb_.AddOffset(ProjectTable::VT_DESCRIPTION, description);
  }
  void add_author(::flatbuffers::Offset<::flatbuffers::String> author) {
    fbb_.AddOffset(ProjectTable::VT_AUTHOR, author);
  }
  void add_version(::flatbuffers::Offset<::flatbuffers::String> version) {
    fbb_.AddOffset(ProjectTable::VT_VERSION, version);
  }
  void add_diagrams_metadata(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<plant_composer::fbs::DiagramMetadata>>> diagrams_metadata) {
    fbb_.AddOffset(ProjectTable::VT_DIAGRAMS_METADATA, diagrams_metadata);
  }
  explicit ProjectTableBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ProjectTable> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ProjectTable>(end);
    fbb_.Required(o, ProjectTable::VT_ID);
    return o;
  }
};

inline ::flatbuffers::Offset<ProjectTable> CreateProjectTable(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> description = 0,
    ::flatbuffers::Offset<::flatbuffers::String> author = 0,
    ::flatbuffers::Offset<::flatbuffers::String> version = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<plant_composer::fbs::DiagramMetadata>>> diagrams_metadata = 0) {
  ProjectTableBuilder builder_(_fbb);
  builder_.add_diagrams_metadata(diagrams_metadata);
  builder_.add_version(version);
  builder_.add_author(author);
  builder_.add_description(description);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ProjectTable> CreateProjectTableDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *name = nullptr,
    const char *description = nullptr,
    const char *author = nullptr,
    const char *version = nullptr,
    const std::vector<::flatbuffers::Offset<plant_composer::fbs::DiagramMetadata>> *diagrams_metadata = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  auto author__ = author ? _fbb.CreateString(author) : 0;
  auto version__ = version ? _fbb.CreateString(version) : 0;
  auto diagrams_metadata__ = diagrams_metadata ? _fbb.CreateVector<::flatbuffers::Offset<plant_composer::fbs::DiagramMetadata>>(*diagrams_metadata) : 0;
  return plant_composer::fbs::CreateProjectTable(
      _fbb,
      id__,
      name__,
      description__,
      author__,
      version__,
      diagrams_metadata__);
}

inline const plant_composer::fbs::ProjectTable *GetProjectTable(const void *buf) {
  return ::flatbuffers::GetRoot<plant_composer::fbs::ProjectTable>(buf);
}

inline const plant_composer::fbs::ProjectTable *GetSizePrefixedProjectTable(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<plant_composer::fbs::ProjectTable>(buf);
}

inline bool VerifyProjectTableBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<plant_composer::fbs::ProjectTable>(nullptr);
}

inline bool VerifySizePrefixedProjectTableBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<plant_composer::fbs::ProjectTable>(nullptr);
}

inline void FinishProjectTableBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<plant_composer::fbs::ProjectTable> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedProjectTableBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<plant_composer::fbs::ProjectTable> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace fbs
}  // namespace plant_composer

#endif  // FLATBUFFERS_GENERATED_PROJECT_PLANT_COMPOSER_FBS_H_
